{"version":3,"sources":["components/Card.jsx","components/CategoryBtns.jsx","components/Search.jsx","components/FormComponent.jsx","components/favourites.jsx","components/Header.jsx","components/home.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","item","addNewFavourite","deleteFavourite","userFavourites","userCard","addOrDelete","onClick","some","list","name","usercard","className","homeworld","birth_year","climate","terrain","CategoryBtns","choseAll","choseCharacters","chosePlanets","allBtn","characterBtn","planetBtn","displayAllButton","Search","children","characterList","planetList","useState","showCategory","setShowCategory","searchLetters","setSearchLetters","createCard","key","planetCards","filter","planet","toLowerCase","includes","map","showList","person","htmlFor","onChange","e","target","value","id","type","FormComponent","formType","setFormType","pickedCardType","setPickedCardType","setName","opt1","setOpt1","opt2","setOpt2","nameTouched","setNameTouched","opt1Touched","setOpt1Touched","opt2Touched","setOpt2Touched","correctForm","validatedName","validatedOpt1","validatedOpt2","nameCss","nameError","length","opt1css","opt1error","test","opt2css","radioButtonPicked","cardType","handleSubmit","event","preventDefault","firstOption","secondOption","formLabel","onBlur","disabled","Favourites","cardCreator","showFavourites","Header","screen","showSearch","showFavs","showHome","goTo","Home","App","setScreen","setCharacterList","setPlanetList","setUserFavourites","baseUrl","a","wholeList","getNewPeople","fetch","response","json","data","results","forEach","listItem","push","next","replace","promisesWithPlanetNames","character","Promise","all","listWithPlanetNames","getNewPlanets","card","newFavouriteList","useEffect","getCharacterList","getPlanetList","header","content","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.29a5a922.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = ({ item, addNewFavourite, deleteFavourite, userFavourites}) => {\n\n    let userCard = null;\n    let addOrDelete = <button onClick={() => addNewFavourite(item)}>Add to favourites +</button>\n\n    if(userFavourites.some(list => list.name ===item.name)){\n        addOrDelete = <button onClick={()=>deleteFavourite(item)}>Remove favourite</button>\n    }\n\n    if(item.usercard){\n        userCard = <span className=\"userCard\">added by user</span>;\n    }\n\n    if(item.homeworld){\n        return(\n            <article className=\"card\">\n            <h3>{item.name}</h3>\n            <p><span>Birthyear: </span>{item.birth_year}</p>\n            <p><span>Homeworld: </span>{item.homeworld}</p>\n            {addOrDelete}\n            {userCard}\n        </article>\n        )\n    } else {\n        return (\n            <article className=\"card\">\n            <h3>{item.name}</h3>\n            <p><span>Climate: </span>{item.climate}</p>\n            <p><span>Terrain: </span>{item.terrain}</p>\n                {addOrDelete}\n                {userCard}\n            </article>\n        )\n    }\n\n}\n\nexport default Card;","import React from 'react';\n\nconst CategoryBtns = ({choseAll, choseCharacters, chosePlanets, allBtn, characterBtn, planetBtn}) => {\n\n    const showAllButton = <button className={allBtn} onClick={choseAll}>All Favourites</button>\n\n    let displayAllButton = null;\n\n    if(choseAll){\n        displayAllButton = showAllButton;\n    }\n\n    return(\n\n        <nav className=\"categories\">\n            {displayAllButton}\n            <button className={characterBtn} onClick={choseCharacters}>Characters</button>\n            <button className={planetBtn} onClick={chosePlanets}>Planets</button>\n        </nav>\n\n    )\n}\n\nexport default CategoryBtns;","import React, { useState } from 'react';\nimport Card from './Card';\nimport CategoryBtns from './CategoryBtns';\n\nconst Search = ({children, characterList, planetList, addNewFavourite, userFavourites, deleteFavourite}) => {\n\n    const [showCategory, setShowCategory] = useState('characters');\n\n    const [searchLetters, setSearchLetters] = useState('');\n\n    let characterBtn = '', planetBtn = '';\n\n    function createCard(item){\n        return(\n            <Card key={item.name}\n            item={item}\n            addNewFavourite={addNewFavourite}\n            userFavourites={userFavourites}\n            deleteFavourite={deleteFavourite}>\n            </Card>\n        )\n    }\n\n    let planetCards = planetList.filter(planet => planet.name.toLowerCase().includes(searchLetters.toLowerCase()) \n    || planet.climate.toLowerCase().includes(searchLetters.toLowerCase())\n    || planet.terrain.toLowerCase().includes(searchLetters.toLowerCase()))\n    .map( item => createCard(item));\n\n    let characterCards = characterList.filter(person => person.name.toLowerCase().includes(searchLetters.toLowerCase()) \n    || person.birth_year.toLowerCase().includes(searchLetters.toLowerCase())\n    || person.homeworld.toLowerCase().includes(searchLetters.toLowerCase()))\n    .map(item => createCard(item));\n\n    let showList = characterCards;\n\n    if(showCategory === 'planets'){\n        showList = planetCards;\n        planetBtn = 'active';\n    }\n    if(showCategory === 'characters'){\n        characterBtn = 'active';\n    }\n\n    return (\n        <>\n            {children}\n            <div className=\"backdrop\">\n                <label htmlFor=\"searchfield\"><h2>Search:</h2></label>\n                <input onChange={e=> setSearchLetters(e.target.value)}\n                id=\"searchfield\" type=\"text\"/>\n                <CategoryBtns choseCharacters={() => setShowCategory('characters')}\n                chosePlanets={()=>setShowCategory('planets')}\n                characterBtn={characterBtn}\n                planetBtn={planetBtn}/>\n                <section className=\"cards\">\n                    {showList}\n                </section>\n            </div>\n\n        </>\n    )\n}\nexport default Search;","import React, { useState } from 'react';\n\nconst FormComponent = ({addNewFavourite}) => {\n\n    const [formType, setFormType] = useState('character');\n    const [pickedCardType, setPickedCardType] = useState(false);\n\n    const[name, setName] = useState('');\n    const [opt1, setOpt1] = useState('');\n    const [opt2, setOpt2] = useState('');\n\n    /// Validation stuff in here ///\n\n    const [nameTouched, setNameTouched] = useState(false);\n    const [opt1Touched, setOpt1Touched] = useState(false);\n    const [opt2Touched, setOpt2Touched] = useState(false);\n\n    const MAXIMUMCHARACTERERROR = 'No more than 25 characters allowed';\n\n    let correctForm = false;\n    let validatedName = false;\n    let validatedOpt1 = false;\n    let validatedOpt2 = false;\n\n    //Name Validation//\n\n    let nameCss = '';\n    let nameError = '2 characters required'\n    if(nameTouched && name.length < 2){\n        nameCss = 'error';\n    } else if(nameTouched && name.length > 25){\n        nameCss = 'error';\n        nameError = MAXIMUMCHARACTERERROR;\n    } else if (nameTouched){\n        validatedName = true;\n    }\n\n    // Option 1 Validation //\n\n    let ageRegex = /^[\\d]+\\s?(bby|aby)/i;\n\n    let opt1css = '';\n    let opt1error = MAXIMUMCHARACTERERROR;\n\n    if(formType === 'planet'){\n        if(opt1Touched && opt1.length > 25){\n            opt1css = 'error';\n        } else{\n            validatedOpt1 = true;\n        }\n    } else{\n        if(opt1Touched && opt1 && !ageRegex.test(opt1)){\n            opt1error ='Format should be: year + bby/aby';\n            opt1css = 'error';\n        } else{\n            validatedOpt1 = true;\n        }\n    }\n\n    // Option 2 Validation //\n\n    let opt2css = '';\n    let opt2error = MAXIMUMCHARACTERERROR;\n    if(opt2Touched && opt2.length > 25){\n        opt2css = 'error';\n    } else{\n        validatedOpt2 = true;\n    }\n\n    if(validatedName && pickedCardType && validatedOpt1 && validatedOpt2){\n        correctForm = true;\n    }\n\n\n    /// End of validation stuff ///\n    \n\n    const radioButtonPicked = (cardType) => {\n        setFormType(cardType);\n        setPickedCardType(true)\n    }\n\n    const emptyFormFields = () => {\n        setName('');\n        setOpt1('');\n        setOpt2('');\n    }\n\n    const handleSubmit = (event)=>{\n        event.preventDefault();\n\n        let firstOption = opt1;\n        if(!firstOption){\n            firstOption = 'unknown';\n        }\n        let secondOption = opt2;\n        if(!secondOption){\n            secondOption = 'unknown';\n        }\n\n        if(formType === \"character\"){\n            addNewFavourite({\n                name: name,\n                birth_year: firstOption,\n                homeworld: secondOption,\n                usercard: true\n            })\n\n        } else {\n            addNewFavourite({\n                name: name,\n                climate: firstOption,\n                terrain: secondOption,\n                usercard: true\n            })\n        }\n        emptyFormFields();\n        setNameTouched(false);\n    }\n\n    let formLabel = ['Birthyear: ', 'Homeworld: '];\n    if(formType === 'planet'){\n        formLabel = ['Climate: ', 'Terrain: ']\n    }\n\n    return(\n    <form>\n        <h3 className=\"form\">Add new favourite</h3>\n        <div> \n            <label htmlFor=\"name\">Name: </label>\n            <input onChange={e => setName(e.target.value)}\n            onBlur={()=> setNameTouched(true)} id=\"name\" type=\"text\" value={name}/> \n        </div>\n        <p className={nameCss}>{nameError}</p>\n        <div>\n            <label className=\"radioLabel\" htmlFor=\"character\">Character: </label>\n            <input onClick={()=>radioButtonPicked('character')} \n            type=\"radio\" name=\"cardType\" id=\"character\"/>\n\n            <label className=\"radioLabel\" htmlFor=\"planet\">Planet: </label>\n            <input onClick={()=>radioButtonPicked('planet')}\n            type=\"radio\" name=\"cardType\" id=\"planet\"/>\n        </div>\n        <p className=\"visible\">Following fields evaluates to 'unknown' if left empty:</p>\n        <div> \n            <label htmlFor=\"opt1\">{formLabel[0]} </label>\n            <input onChange={e => setOpt1(e.target.value)}\n            onBlur={()=> setOpt1Touched(true)} \n            value={opt1} disabled={!pickedCardType} \n            id=\"opt1\" type=\"text\"/> \n        </div>\n        <p className={opt1css}>{opt1error}</p>\n        <div> \n            <label htmlFor=\"opt2\">{formLabel[1]} </label>\n            <input onChange={e => setOpt2(e.target.value)} \n            onBlur={()=> setOpt2Touched(true)} \n            value={opt2} disabled={!pickedCardType} \n            id=\"opt2\" type=\"text\"/> \n        </div>\n        <p className={opt2css}>{opt2error}</p>\n        <button onClick={(event)=>handleSubmit(event)}\n        disabled={!correctForm}\n        >Add</button>\n    </form>)\n\n}\n\nexport default FormComponent;","import React, { useState } from 'react';\nimport Card from './Card';\nimport CategoryBtns from './CategoryBtns';\nimport FormComponent from './FormComponent';\n\nconst Favourites = ({children, userFavourites, deleteFavourite, addNewFavourite}) => {\n\n    const [showCategory, setShowCategory] = useState('all');\n\n    function cardCreator(item){\n        return (\n            <Card key={item.name} item={item}\n            deleteFavourite={deleteFavourite}\n            userFavourites={userFavourites}>\n            </Card>\n        )\n    }\n\n    let allBtn = '', characterBtn = '', planetBtn = '';\n\n    let showFavourites = userFavourites.map(item => cardCreator(item));\n\n    if(showCategory === 'characters'){\n        showFavourites = userFavourites.filter(item => item.homeworld)\n        .map((item)=> cardCreator(item));\n\n        characterBtn = 'active';\n    }\n    if(showCategory === 'planets'){\n        showFavourites = userFavourites.filter(item => item.climate)\n        .map(item => cardCreator(item));\n\n        planetBtn = 'active';\n    }\n    if(showCategory === 'all'){\n        allBtn = 'active';\n    }\n\n    return(\n        <div>\n            {children}\n            <div className=\"backdrop\">\n            <h2> Your Favourites</h2>\n            <FormComponent addNewFavourite={addNewFavourite}/>\n            <CategoryBtns \n                choseAll={()=> setShowCategory('all')}\n                choseCharacters={() => setShowCategory('characters')}\n                chosePlanets={()=>setShowCategory('planets')}\n                allBtn={allBtn}\n                characterBtn={characterBtn}\n                planetBtn={planetBtn}/>\n            <section className=\"cards\">\n            {showFavourites}\n            </section>\n            </div>\n        </div>\n    )\n}\n\nexport default Favourites;","import React from 'react';\n\nconst Header = ({screen, showSearch, showFavs, showHome})=> {\n\n    let goTo = 'Favourites';\n\n    if(screen === 'favouritescreen'){\n        goTo = 'Search';\n    };\n\n    const screenLink = () => {\n        return goTo === 'Favourites' ? showFavs() : showSearch();\n    }\n\n    return (\n\n        <header>\n            <nav> \n                <span onClick={screenLink}>To {goTo}</span>\n                <span onClick={()=>showHome()}>Home</span>\n            </nav>\n        </header>\n\n    )\n}\n\nexport default Header;","import React from 'react';\n\nconst Home = ({showFavs, showSearch}) => {\n\n    return (\n        <div className=\"container\">\n            <h1>Star Wars</h1>\n            <button onClick={()=>showSearch()} className=\"homeBtn\">Search</button>\n            <button onClick={()=>showFavs()} className=\"homeBtn\">Favourites</button>\n        </div>\n\n    );\n}\n\nexport default Home;","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport Search from './components/Search';\nimport Favourites from './components/favourites';\nimport Header from './components/Header';\nimport Home from './components/home';\n\nfunction App() {\n\n  const HOMESCREEN = 'homescreen' ,SEARCHSCREEN = 'searchscreen', FAVOURITESCREEN = 'favouritescreen';\n\n  const [screen, setScreen] = useState(HOMESCREEN);\n\n  const [characterList, setCharacterList] = useState([]);\n  const [planetList, setPlanetList] = useState([]);\n  const [userFavourites, setUserFavourites] = useState([]);\n\n              // API CALLS HER//\n\n  const baseUrl = 'https://swapi.dev/api/';\n\n  async function getCharacterList(){\n      let wholeList = [];\n      let getNewPeople = `${baseUrl}people/`;\n\n      while(getNewPeople){\n        const response = await fetch(getNewPeople);\n        const data = await response.json();\n\n        data.results.forEach(listItem =>{\n          wholeList.push(listItem);\n        })\n        if(data.next){\n          getNewPeople = data.next.replace('http', 'https');\n        } else {\n          getNewPeople = data.next;\n        }\n      }\n      \n     let promisesWithPlanetNames = wholeList.map(async character => {\n         const response = await fetch(character.homeworld);\n         const data = await response.json();\n         character.homeworld = data.name;\n         return character\n\n     });\n     const listWithPlanetNames = await Promise.all(promisesWithPlanetNames);\n     setCharacterList(listWithPlanetNames);\n  }\n\n  async function getPlanetList(){\n    let wholeList = [];\n    let getNewPlanets = `${baseUrl}planets/`;\n\n    while(getNewPlanets){\n      const response = await fetch(getNewPlanets);\n      const data = await response.json();\n\n      data.results.forEach(listItem =>{\n        wholeList.push(listItem);\n      })\n      if(data.next){\n        getNewPlanets = data.next.replace('http', 'https');\n      } else {\n        getNewPlanets = data.next;\n      }\n    }\n\n      setPlanetList(wholeList);\n  }\n\n  useEffect(() => {\n      getCharacterList();\n      getPlanetList();\n\n  } ,[])\n\n              // END OF API CALL//\n  \n  function addNewFavourite(item){\n    if(!userFavourites.some(card => card.name === item.name)){\n      setUserFavourites([item , ...userFavourites]);\n    }\n  }\n\n  function deleteFavourite(item){\n    let newFavouriteList = [...userFavourites];\n    newFavouriteList = newFavouriteList.filter((listItem)=>{\n      return listItem.name !== item.name;\n    })\n    setUserFavourites(newFavouriteList);\n  }\n  \n\n  /// Here we decide what component shows when ///\n\n  const header = <Header screen={screen}\n  showSearch={()=>setScreen(SEARCHSCREEN)}\n  showFavs={()=>setScreen(FAVOURITESCREEN)}\n  showHome={()=>setScreen(HOMESCREEN)}/>;\n\n  let content = null;\n  switch (screen){\n\n    case SEARCHSCREEN:\n      content = <Search characterList={characterList}\n                        planetList={planetList}\n                        addNewFavourite={addNewFavourite}\n                        userFavourites={userFavourites}\n                        deleteFavourite={deleteFavourite}>\n                    {header}\n                </Search>\n      break;\n\n    case FAVOURITESCREEN:\n        content = <Favourites \n        userFavourites={userFavourites}\n        deleteFavourite={deleteFavourite}\n        addNewFavourite={addNewFavourite}>\n                    {header}\n                  </Favourites>\n        break;\n\n      default:\n        content = <Home showSearch={()=>setScreen(SEARCHSCREEN)}\n        showFavs={()=>setScreen(FAVOURITESCREEN)}/>\n\n  }\n\n  return (\n    <div className=\"App\">\n      <div className=\"blur\"></div>\n      {content}\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}